/**
 * @file solver.h
 *
 * @brief Functions to solve a sokoban game
 *
 * @author M.Giordani
 *
 */

#ifndef SOLVER_H
#define SOLVER_H

#include <stdbool.h>
#include "sokoban.h"
#include "queue_map.h"
#include "linked_list_map.h"
#include "bst_map.h"

/**
 * @brief An alias to the stats structure
 *
 */
typedef struct stats stats;

/**
 * @brief An alias to the movement plan structure
 *
 */
typedef struct movement_plan movement_plan;

/**
 * @brief A structure representing datas collected from solving a map
 *
 */
struct stats
{
	/** The path to the solved map*/
	char *path;
	/** A boolean indicating if map is winable*/
	bool is_win_plan;
	/** The win plan if existing, NULL if not*/
	movement_plan *plan;
	/** The number of explored nodes during solving*/
	int explored_nodes;
	/** The time used to solve the game*/
	double solve_time;
};

/**
 * @brief A structure representing a win plan
 *
 */
struct movement_plan
{
	/** The length of the win plan*/
	int length;
	/** The string containing the win plan movements*/
	char *str;
};

/**
 * @brief Solve a sokoban map using linked lists
 *
 * @param path The path to a map
 * @return A stat object containing solving values
 */
stats solve_map_list(char path[]);

/**
 * @brief Solve a sokoban map using BST (more precisely AVL trees)
 *
 * @param path The path to a map
 * @return A stat object containing solving values
 */
stats solve_map_bst(char path[]);

/**
 * @brief Return a boolean indicating if a box of the map is in the corner (means game unfinishable)
 *
 * @param my_map The map considered
 */
bool are_box_in_corner(map my_map);

/**
 * @brief Build a movement plan to go from initial cell to given cell
 *
 * @param cell The given cell to reach
 */
movement_plan build_plan(queue_cell cell);

/**
 * @brief Print the solution of a sokoban game and the stats obtained from it
 *
 * @param path The path to a sokoban game
 * @param with_list Boolean indicating if the game is solved using only BST or both linked list and BST
 * @param with_GUI Boolean indicating if the game is shown with the GUI after solving
 */
void print_solve(char path[], bool with_list, bool with_GUI);

/**
 * @brief Print a movement plan
 *
 */
void print_plan(movement_plan plan);

/**
 * @brief Print a path to a file
 *
 */
void print_path(char path[]);

/**
 * @brief Deallocate a movement plan
 *
 */
void deallocate_plan(movement_plan plan);

/**
 * @brief Deallocate a stats object
 *
 */
void deallocate_stats(stats my_stats);

/**
 * @brief Deallocate objects generated by the solver using lists
 *
 */
void deallocate_solver_list(queue search_queue, queue dequeued_queue, linked_list_map explored_list);

/**
 * @brief Deallocate objects generated by the solver using BST
 *
 */
void deallocate_solver_bst(queue search_queue, queue dequeued_queue, bst_map explored_tree);

#endif